import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { vi, describe, test, expect, beforeEach } from 'vitest';
import { ChatBotPage } from './pages';

// Add mock directly in test file
vi.mock('@hexlet/chatbot-v2', () => ({
  default: ({ steps = [] }) => {
    const MockChatBot = () => {
      const [isOpen, setIsOpen] = React.useState(false);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ steps –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      if (!Array.isArray(steps)) {
        throw new Error('Steps must be an array');
      }
      
      return (
        <div data-testid="chatbot-container">
          <input data-testid="chat-input" placeholder="Chat input" />
          <button data-testid="send-button">Send</button>
          <button 
            data-testid="chat-open-button"
            onClick={() => setIsOpen(true)}
          >
            üí¨
          </button>
          {isOpen && (
            <div data-testid="chat-window">
              <div data-testid="chat-header">
                <h3>–ß–∞—Ç-–±–æ—Ç</h3>
                <button 
                  data-testid="chat-close-button"
                  onClick={() => setIsOpen(false)}
                >
                  √ó
                </button>
              </div>
              <div data-testid="chat-messages">
                <div data-testid="welcome-message">
                  –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç!
                </div>
              </div>
              <div>
                <input data-testid="user-input" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." />
                <button data-testid="send-button">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
              </div>
            </div>
          )}
        </div>
      )
    };
    return <MockChatBot />;
  }
}))

import ChatBot from "../src/components/Widget";

describe('E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞', () => {
  let chatBotPage;

  beforeEach(() => {
    chatBotPage = new ChatBotPage();
  });

  test('chatbot widget renders without errors', async () => {
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
    render(<ChatBot steps={[]} />);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    expect(screen.getByTestId('chatbot-container')).toBeInTheDocument();
    expect(screen.getByTestId('chat-open-button')).toBeInTheDocument();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∞—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç
    expect(screen.queryByTestId('chat-window')).not.toBeInTheDocument();
  });

  test('chatbot widget accepts steps prop', async () => {
    // –¢–µ—Å—Ç —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç steps prop
    const testSteps = [{ id: 1, message: 'Test' }];
    render(<ChatBot steps={testSteps} />);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ steps
    expect(screen.getByTestId('chatbot-container')).toBeInTheDocument();
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ welcome —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    await chatBotPage.openChat();
    expect(screen.getByTestId('welcome-message')).toBeInTheDocument();
  });

  test('chatbot widget handles empty steps', async () => {
    // –¢–µ—Å—Ç —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ steps
    render(<ChatBot steps={[]} />);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –¥–∞–∂–µ —Å –ø—É—Å—Ç—ã–º–∏ steps
    expect(screen.getByTestId('chatbot-container')).toBeInTheDocument();
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ welcome —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    await chatBotPage.openChat();
    expect(screen.getByTestId('welcome-message')).toBeInTheDocument();
  });

  test('chatbot widget handles undefined steps', async () => {
    // –¢–µ—Å—Ç —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç undefined steps
    render(<ChatBot />);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –¥–∞–∂–µ –±–µ–∑ steps
    expect(screen.getByTestId('chatbot-container')).toBeInTheDocument();
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ welcome —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    await chatBotPage.openChat();
    expect(screen.getByTestId('welcome-message')).toBeInTheDocument();
  });
});